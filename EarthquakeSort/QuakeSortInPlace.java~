
/**
 * Write a description of class QuakeSortInPlace here.
 * 
 * Chia-Hao
 * 2018.10.11
 */

import java.util.*;
import edu.duke.*;

public class QuakeSortInPlace {
    private int passes_count;
    public QuakeSortInPlace() {
        
    }
    
    public int getLargestDepth(ArrayList<QuakeEntry> quakeData, int from)
    {   
        int maxIndex = from;
        for( int i = from+1; i < quakeData.size(); i++ ){
            if( quakeData.get(maxIndex).getDepth() < quakeData.get(i).getDepth() ){
                maxIndex = i;
            }
        }
        return maxIndex;
    }
    
    public int getSmallestMagnitude(ArrayList<QuakeEntry> quakes, int from) {
        int minIdx = from;
        for (int i=from+1; i< quakes.size(); i++) {
            if (quakes.get(i).getMagnitude() < quakes.get(minIdx).getMagnitude()) {
                minIdx = i;
            }
        }
        return minIdx;
    }
    
    public void sortByLargestDepth(ArrayList<QuakeEntry> in) {
        int maxIndex;
        for( int i = 0; i < in.size(); i++ ) {
           if(i==70) break;
           maxIndex = getLargestDepth(in, i);
           QuakeEntry i_qe = in.get(i);
           QuakeEntry max_qe = in.get(maxIndex);
           in.set(i, max_qe);
           in.set(maxIndex, i_qe);
        }
    }
    
    public void sortByMagnitude(ArrayList<QuakeEntry> in) {
       
       for (int i=0; i< in.size(); i++) {
            int minIdx = getSmallestMagnitude(in,i);
            QuakeEntry qi = in.get(i);
            QuakeEntry qmin = in.get(minIdx);
            in.set(i,qmin);
            in.set(minIdx,qi);
        }
        
    }
    
    public void onePassBubbleSort(ArrayList<QuakeEntry> quakeData, int numSorted) {
        for( int i = 0; i < quakeData.size()-numSorted-1; i++ )
        {
            if( quakeData.get(i).getMagnitude() > quakeData.get(i+1).getMagnitude() ) {
                QuakeEntry i_qe = quakeData.get(i);
                QuakeEntry next_qe = quakeData.get(i+1);
                quakeData.set(i, next_qe);
                quakeData.set(i+1, i_qe);
            }
        }
    }
    
    public void sortByMagnitudeWithBubbleSort(ArrayList<QuakeEntry> in) {
        for( int i = 0; i < in.size()-1; i++ )
        {
            onePassBubbleSort(in, i);
            //for (QuakeEntry qe: in) { 
            //    System.out.println(qe);
            //}
            //System.out.println("The "+i+"-th bubble sort pass: ");
        }
    }
    
    public boolean checkInSortedOrder(ArrayList<QuakeEntry> quakes) {
        for( int i = 0; i < quakes.size()-1; i++ )
        {
            if(quakes.get(i).getMagnitude() > quakes.get(i+1).getMagnitude()) return false;
        }
        return true;
    }
    
    public void sortByMagnitudeWithBubbleSortWithCheck(ArrayList<QuakeEntry> in) {
        int count = 0;
        for( int i = 0; i < in.size()-1; i++ )
        {
            onePassBubbleSort(in, i);
            count++;
            if( checkInSortedOrder(in) ) break;
            //for (QuakeEntry qe: in) { 
            //    System.out.println(qe);
            //}
            //System.out.println("The "+i+"-th bubble sort pass: ");
        }
        passes_count = count;
        System.out.println("sortByMagnitudeWithBubbleSortWithCheck "+count+ " passes bubble sorting");
    }
    
    public void sortByMagnitudeWithCheck(ArrayList<QuakeEntry> in) {
        int count = 0;
        for (int i=0; i< in.size(); i++) {
            if( checkInSortedOrder(in) ) break;
            int minIdx = getSmallestMagnitude(in,i);
            QuakeEntry qi = in.get(i);
            QuakeEntry qmin = in.get(minIdx);
            in.set(i,qmin);
            in.set(minIdx,qi);
            count++;
        }
        passes_count = count;
        System.out.println("sortByMagnitudeWithCheck "+count+ " passes bubble sorting");

    }
    
    public void testSort() {
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedatasmall.atom";
        source = "data/earthquakeDataSampleSix2.atom";
        //source = "data/earthquakeDataSampleSix1.atom";
        //String source = "data/nov20quakedata.atom";
        source = "data/earthQuakeDataDec6sample1.atom";
        //source = "data/earthQuakeDataDec6sample2.atom";
        source = "data/earthQuakeDataWeekDec6sample1.atom";
        
        ArrayList<QuakeEntry> list  = parser.read(source);  
        //for (QuakeEntry qe: list) { 
        //    System.out.println(qe);
        //} 
       
            
        //sortByMagnitude(list);
        //sortByLargestDepth(list);
        //sortByMagnitudeWithBubbleSort(list);
        //sortByMagnitudeWithBubbleSortWithCheck(list);
        //sortByMagnitudeWithCheck(list);
        for (QuakeEntry qe: list) { 
            System.out.println(qe);
        } 
        System.out.println("read data for "+list.size()+" quakes");
        System.out.println("sortByMagnitudeWithBubbleSortWithCheck "+passes_count+ " passes bubble sorting");

        
    }
    
    public void createCSV() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "data/nov20quakedata.atom";
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: " + list.size());
    }
    
    public void dumpCSV(ArrayList<QuakeEntry> list) {
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                              qe.getLocation().getLatitude(),
                              qe.getLocation().getLongitude(),
                              qe.getMagnitude(),
                              qe.getInfo());
        }
        
    }
}
